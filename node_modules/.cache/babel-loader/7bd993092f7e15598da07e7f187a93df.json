{"ast":null,"code":"import _toConsumableArray from \"D:\\\\react\\\\social_network_zalash_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\react\\\\social_network_zalash_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\react\\\\social_network_zalash_react\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\react\\\\social_network_zalash_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getDialogs);\n\nimport axiosInstance from \"../dal/axios-instance\";\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nvar initialStateSetDialogId = {\n  dialogsId: '1488',\n  dialogUsersAll: [],\n  informationUsers: [],\n  currentMessageUser: '',\n  currentUser: {\n    photos: {\n      small: ''\n    }\n  }\n};\nvar SET_DIALOG_ID = 'SET_DIALOG_ID';\nexport var dialogIdAction = function dialogIdAction(mas) {\n  return {\n    type: SET_DIALOG_ID,\n    id: mas\n  };\n};\nvar GET_DIALOG = 'GET_DIALOG';\n\nvar getDialogAction = function getDialogAction(information) {\n  return {\n    type: GET_DIALOG,\n    information: information\n  };\n};\n\nvar GET_USERS_PROFILE = 'GET_USERS_PROFILE';\n\nvar getUsersProfileAction = function getUsersProfileAction(information) {\n  return {\n    type: GET_USERS_PROFILE,\n    information: information\n  };\n};\n\nvar GET_CURRENT_MESSAGE_USER = 'GET_CURRENT_MESSAGE_USER';\n\nvar getCurrentMessageUserAction = function getCurrentMessageUserAction(message) {\n  return {\n    type: GET_CURRENT_MESSAGE_USER,\n    message: message\n  };\n};\n\nvar CLEAR_ALL_DIALOG = 'CLEAR_ALL_DIALOG';\nexport var clearAllDialogAction = function clearAllDialogAction() {\n  return {\n    type: CLEAR_ALL_DIALOG\n  };\n};\nvar GET_USER_PROFILE = 'GET_USER_PROFILE';\n\nvar getUserProfileAction = function getUserProfileAction(profile) {\n  return {\n    type: GET_USER_PROFILE,\n    profile: profile\n  };\n};\n\nexport var getUserProfile = function getUserProfile(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var request;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                debugger;\n                _context.next = 3;\n                return axiosInstance.get(\"profile/\".concat(id));\n\n              case 3:\n                request = _context.sent;\n                dispatch(getUserProfileAction(request.data));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; // Запросить список собеседников, с кем я когда-либо вёл беседу\n// return http://prntscr.com/n6nz6o\n// export const getDialogs = () => async (dispatch) => {\n//     // dispatch(clearAllDialogAction());\n//     debugger\n//     let get = await axiosInstance.get('dialogs');\n//     dispatch(getUsers(get.data))\n// };\n\nfunction fetchUser() {\n  var user;\n  return _regeneratorRuntime.wrap(function fetchUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          debugger;\n          _context2.next = 4;\n          return call(axiosInstance, 'dialogs');\n\n        case 4:\n          user = _context2.sent;\n          _context2.next = 7;\n          return put(getUsers(user.data));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return alert(_context2.t0);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, this, [[0, 9]]);\n}\n\nexport function getDialogs() {\n  return _regeneratorRuntime.wrap(function getDialogs$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2, this);\n} // function* getUsers (users){\n//     debugger\n//     let buffer = [];\n//         for (let i = 0; users.length > i; i++) {\n//             const request = yield call(axiosInstance, `profile/${users[i].id}`);\n//             buffer.push(request.data);\n//         }\n//    yield put (getUsersProfileAction(buffer))\n// }\n//\n\nvar getProfileUser =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(users, i) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axiosInstance.get(\"profile/\".concat(users[i].id));\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getProfileUser(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getUsers = function getUsers(users) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var _loop, i;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _loop = function _loop(i) {\n                  // let request = await axiosInstance.get(`profile/${users[i].id}`).catch(error=>axiosInstance.get(`profile/${users[i].id}`));\n                  var request = getProfileUser(users, i).then(function (e) {\n                    return setTimeout(function () {\n                      return dispatch(getUsersProfileAction(e.data));\n                    }, i * 1000);\n                  });\n                };\n\n                for (i = 0; users.length > i; i++) {\n                  _loop(i);\n                }\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; // const getUsers = (users) => async (dispatch) => {\n//     let buffer = [];\n//     let usersAllDialogs = await (async (us = users) => {\n//         for (let i = 0; us.length > i; i++) {\n//             let request = await axiosInstance.get(`profile/${us[i].id}`);\n//             buffer.push(request.data);\n//         }\n//         return buffer\n//     })();\n//     dispatch(getUsersProfileAction(usersAllDialogs))\n// };\n// запросить список сообщений с конкретным собеседником (userId)\n// return http://prntscr.com/n6nq5a\n\n\nexport var getMessages = function getMessages(userId) {\n  return function (dispatch) {\n    axiosInstance.get(\"dialogs/\".concat(userId, \"/messages\")).then(function (res) {\n      debugger;\n      console.log(res.data);\n      dispatch(getCurrentMessageUserAction(res.data.items));\n    });\n  };\n}; // отправить сообщение (body: string) конкретному собеседнику (userId)\n\nexport var sendMessage = function sendMessage(userId, body) {\n  return function (dispatch) {\n    debugger;\n    axiosInstance.post(\"dialogs/\".concat(userId, \"/messages\"), {\n      body: body\n    }).then(function (res) {\n      console.log(res.data);\n      dispatch(getMessages(userId));\n    });\n  };\n}; // обновить\\зарефрешить конкретного собеседника (userId), чтобы этот собеседник был вверху списка собеседников\n\nfunction updateDialog(userId) {\n  axiosInstance.put(\"dialogs/\".concat(userId)).then(function (res) {\n    return console.log(res.data);\n  });\n} // просмотрено ли моё сообщение моим собеседником\n\n\nfunction isViewed(messageId) {\n  axiosInstance.get(\"dialogs/messages/\".concat(messageId, \"/viewed\")).then(function (res) {\n    return console.log(res.data);\n  });\n} // пометить сообщение как СПАМ\n\n\nfunction setSpamStatus(messageId) {\n  axiosInstance.post(\"dialogs/messages/\".concat(messageId, \"/spam\")).then(function (res) {\n    return console.log(res.data);\n  });\n} // удалить сообщение (удаляется только для удаляющей стороны, для собеседника сообщение не удаляется)\n\n\nfunction deleteMessage(messageId) {\n  axiosInstance.delete(\"dialogs/messages/\".concat(messageId)).then(function (r) {\n    console.log(r.data);\n  });\n} // восстановить удалённое сообщение (автоматически оно перестаёт ещё и быть спамом, если было отмечено как спам)\n\n\nfunction restoreMessage(messageId) {\n  axiosInstance.put(\"dialogs/messages/\".concat(messageId, \"/restore\")).then(function (res) {\n    return console.log(res.data);\n  });\n} // получить сообщения из переписки с конкретным собеседником, сообщения, которые новее переданной даты\n// return http://prntscr.com/n6nrug\n\n\nfunction checkNewMessages(userId, date) {\n  axiosInstance.get(\"dialogs/\".concat(userId, \"/messages/new?newerThen=\").concat(date)).then(function (r) {\n    console.log(r.data);\n  });\n} // получить число всех непрочитанных (новых) сообщений\n\n\nfunction newMessagesCount() {\n  axiosInstance.get(\"dialogs/messages/new/count\").then(function (r) {\n    console.log(r.data);\n  });\n}\n\nvar setDialogIdReducer = function setDialogIdReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateSetDialogId;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  debugger;\n\n  var copyState = _objectSpread({}, state);\n\n  switch (action.type) {\n    case CLEAR_ALL_DIALOG:\n      return _objectSpread({}, state, {\n        informationUsers: []\n      });\n\n    case GET_USER_PROFILE:\n      return _objectSpread({}, state, {\n        currentUser: action.profile\n      });\n\n    case GET_CURRENT_MESSAGE_USER:\n      return _objectSpread({}, state, {\n        currentMessageUser: action.message\n      });\n\n    case GET_DIALOG:\n      return _objectSpread({}, state, {\n        dialogUsersAll: action.information\n      });\n\n    case GET_USERS_PROFILE:\n      copyState.informationUsers = _toConsumableArray(state.informationUsers).concat([action.information]);\n      return copyState;\n\n    case SET_DIALOG_ID:\n      copyState.dialogsId = action.id;\n      return copyState;\n\n    default:\n      return state;\n  }\n};\n\nexport default setDialogIdReducer;","map":{"version":3,"sources":["D:\\react\\social_network_zalash_react\\src\\reducer\\setDialogIdReducer.js"],"names":["fetchUser","getDialogs","axiosInstance","call","put","takeEvery","takeLatest","initialStateSetDialogId","dialogsId","dialogUsersAll","informationUsers","currentMessageUser","currentUser","photos","small","SET_DIALOG_ID","dialogIdAction","mas","type","id","GET_DIALOG","getDialogAction","information","GET_USERS_PROFILE","getUsersProfileAction","GET_CURRENT_MESSAGE_USER","getCurrentMessageUserAction","message","CLEAR_ALL_DIALOG","clearAllDialogAction","GET_USER_PROFILE","getUserProfileAction","profile","getUserProfile","dispatch","get","request","data","user","getUsers","alert","getProfileUser","users","i","then","e","setTimeout","length","getMessages","userId","res","console","log","items","sendMessage","body","post","updateDialog","isViewed","messageId","setSpamStatus","deleteMessage","delete","r","restoreMessage","checkNewMessages","date","newMessagesCount","setDialogIdReducer","state","action","copyState"],"mappings":"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","sourcesContent":["import axiosInstance from \"../dal/axios-instance\";\r\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\r\n\r\nlet initialStateSetDialogId = {\r\n    dialogsId: '1488',\r\n    dialogUsersAll: [],\r\n    informationUsers: [],\r\n    currentMessageUser: '',\r\n    currentUser: {\r\n        photos:{\r\n            small:''\r\n        }\r\n    }\r\n};\r\nconst SET_DIALOG_ID = 'SET_DIALOG_ID';\r\nexport const dialogIdAction = (mas) => {\r\n    return {\r\n        type: SET_DIALOG_ID,\r\n        id: mas\r\n    }\r\n};\r\n\r\nconst GET_DIALOG = 'GET_DIALOG';\r\nconst getDialogAction = (information) => {\r\n    return {\r\n        type: GET_DIALOG,\r\n        information\r\n    }\r\n};\r\n\r\nconst GET_USERS_PROFILE = 'GET_USERS_PROFILE';\r\nconst getUsersProfileAction = (information) => {\r\n    return {\r\n        type: GET_USERS_PROFILE,\r\n        information\r\n    }\r\n};\r\n\r\nconst GET_CURRENT_MESSAGE_USER = 'GET_CURRENT_MESSAGE_USER';\r\nconst getCurrentMessageUserAction = (message) => {\r\n    return {\r\n        type: GET_CURRENT_MESSAGE_USER,\r\n        message\r\n    }\r\n};\r\n\r\nconst CLEAR_ALL_DIALOG = 'CLEAR_ALL_DIALOG';\r\nexport const clearAllDialogAction = () => {\r\n    return {\r\n        type: CLEAR_ALL_DIALOG\r\n    }\r\n};\r\n\r\nconst GET_USER_PROFILE = 'GET_USER_PROFILE';\r\nconst getUserProfileAction = (profile) => ({type: GET_USER_PROFILE,profile});\r\n\r\nexport const getUserProfile = (id)=> async(dispatch)=>{\r\n    debugger\r\n    let request = await axiosInstance.get(`profile/${id}`);\r\n    dispatch(getUserProfileAction(request.data))\r\n};\r\n\r\n\r\n// Запросить список собеседников, с кем я когда-либо вёл беседу\r\n// return http://prntscr.com/n6nz6o\r\n\r\n\r\n// export const getDialogs = () => async (dispatch) => {\r\n//     // dispatch(clearAllDialogAction());\r\n//     debugger\r\n//     let get = await axiosInstance.get('dialogs');\r\n//     dispatch(getUsers(get.data))\r\n// };\r\n\r\n\r\n\r\n\r\nfunction* fetchUser() {\r\n    try {\r\n        debugger\r\n        const user = yield call(axiosInstance, 'dialogs');\r\n        yield put(getUsers(user.data));\r\n    } catch (e) {\r\n        yield alert(e);\r\n    }\r\n}\r\n\r\nexport function* getDialogs() {\r\n    yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\r\n}\r\n\r\n// function* getUsers (users){\r\n//     debugger\r\n//     let buffer = [];\r\n//         for (let i = 0; users.length > i; i++) {\r\n//             const request = yield call(axiosInstance, `profile/${users[i].id}`);\r\n//             buffer.push(request.data);\r\n//         }\r\n//    yield put (getUsersProfileAction(buffer))\r\n// }\r\n\r\n\r\n//\r\nconst getProfileUser = async (users,i) =>{\r\n    return await axiosInstance.get(`profile/${users[i].id}`)\r\n};\r\n\r\nconst getUsers = (users) => async (dispatch) => {\r\n        for (let i = 0; users.length > i; i++) {\r\n           // let request = await axiosInstance.get(`profile/${users[i].id}`).catch(error=>axiosInstance.get(`profile/${users[i].id}`));\r\n            let request = getProfileUser(users,i).then(\r\n                (e)=>setTimeout(()=>dispatch(getUsersProfileAction(e.data)),i*1000)\r\n            )\r\n\r\n        }\r\n};\r\n\r\n// const getUsers = (users) => async (dispatch) => {\r\n//     let buffer = [];\r\n//     let usersAllDialogs = await (async (us = users) => {\r\n//         for (let i = 0; us.length > i; i++) {\r\n//             let request = await axiosInstance.get(`profile/${us[i].id}`);\r\n//             buffer.push(request.data);\r\n//         }\r\n//         return buffer\r\n//     })();\r\n//     dispatch(getUsersProfileAction(usersAllDialogs))\r\n// };\r\n\r\n// запросить список сообщений с конкретным собеседником (userId)\r\n// return http://prntscr.com/n6nq5a\r\nexport const getMessages = (userId) => (dispatch) => {\r\n    axiosInstance.get(`dialogs/${userId}/messages`)\r\n        .then(res => {\r\n            debugger\r\n            console.log(res.data)\r\n            dispatch(getCurrentMessageUserAction(res.data.items))\r\n        });\r\n};\r\n\r\n\r\n// отправить сообщение (body: string) конкретному собеседнику (userId)\r\nexport const sendMessage = (userId, body) => (dispatch) => {\r\n    debugger\r\n    axiosInstance.post(`dialogs/${userId}/messages`, {body})\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch(getMessages(userId))\r\n        });\r\n};\r\n\r\n// обновить\\зарефрешить конкретного собеседника (userId), чтобы этот собеседник был вверху списка собеседников\r\nfunction updateDialog(userId) {\r\n    axiosInstance.put(`dialogs/${userId}`)\r\n        .then(res => console.log(res.data));\r\n}\r\n\r\n// просмотрено ли моё сообщение моим собеседником\r\nfunction isViewed(messageId) {\r\n    axiosInstance.get(`dialogs/messages/${messageId}/viewed`)\r\n        .then(res => console.log(res.data));\r\n}\r\n\r\n// пометить сообщение как СПАМ\r\nfunction setSpamStatus(messageId) {\r\n    axiosInstance.post(`dialogs/messages/${messageId}/spam`)\r\n        .then(res => console.log(res.data));\r\n}\r\n\r\n// удалить сообщение (удаляется только для удаляющей стороны, для собеседника сообщение не удаляется)\r\nfunction deleteMessage(messageId) {\r\n    axiosInstance.delete(`dialogs/messages/${messageId}`).then(r => {\r\n        console.log(r.data);\r\n    });\r\n}\r\n\r\n// восстановить удалённое сообщение (автоматически оно перестаёт ещё и быть спамом, если было отмечено как спам)\r\nfunction restoreMessage(messageId) {\r\n    axiosInstance.put(`dialogs/messages/${messageId}/restore`)\r\n        .then(res => console.log(res.data));\r\n}\r\n\r\n// получить сообщения из переписки с конкретным собеседником, сообщения, которые новее переданной даты\r\n// return http://prntscr.com/n6nrug\r\nfunction checkNewMessages(userId, date) {\r\n    axiosInstance.get(`dialogs/${userId}/messages/new?newerThen=${date}`).then(r => {\r\n        console.log(r.data);\r\n    });\r\n}\r\n\r\n// получить число всех непрочитанных (новых) сообщений\r\nfunction newMessagesCount() {\r\n    axiosInstance.get(`dialogs/messages/new/count`).then(r => {\r\n        console.log(r.data);\r\n    });\r\n}\r\n\r\n\r\nlet setDialogIdReducer = (state = initialStateSetDialogId, action) => {\r\n    debugger\r\n    let copyState = {...state};\r\n    switch (action.type) {\r\n        case CLEAR_ALL_DIALOG:\r\n            return {...state, informationUsers: []};\r\n        case GET_USER_PROFILE:\r\n            return {...state, currentUser: action.profile};\r\n        case GET_CURRENT_MESSAGE_USER:\r\n            return {...state, currentMessageUser: action.message};\r\n        case GET_DIALOG:\r\n            return {...state, dialogUsersAll: action.information};\r\n        case GET_USERS_PROFILE:\r\n            copyState.informationUsers = [...state.informationUsers, action.information];\r\n            return copyState;\r\n        case SET_DIALOG_ID:\r\n            copyState.dialogsId = action.id;\r\n            return copyState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default setDialogIdReducer;"]},"metadata":{},"sourceType":"module"}